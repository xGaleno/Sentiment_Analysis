import io
import os
import requests
import base64
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import simpleSplit, ImageReader
from reportlab.lib.colors import lightgrey, black, HexColor # Importar HexColor para colores personalizados

API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDzVyGvtw2qOhCzvOAzKvOCVPOC5s09bqY")
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={API_KEY}"

def get_summary_from_gemini(text: str) -> str:
    """
    Obtiene un resumen ejecutivo de un texto dado utilizando la API de Gemini.
    Configura el modelo para generar un resumen conciso de m√°ximo 100 palabras.
    """
    headers = { "Content-Type": "application/json" }
    payload = {
        "contents": [{
            "parts": [{
                "text": (
                    f"Contexto: Alicia Modas es una tienda de ropa femenina en Mendoza.\n"
                    f"Este es un conjunto de opiniones de clientas sobre su experiencia de compra:\n\n{text}\n\n"
                    f"Genera un resumen ejecutivo en espa√±ol profesional de m√°ximo 100 palabras."
                )
            }]
        }],
        "generationConfig": {
            "temperature": 0.7, # Controla la creatividad de la respuesta
            "maxOutputTokens": 150 # Limita la longitud m√°xima del resumen para asegurar concisi√≥n
        }
    }

    try:
        response = requests.post(GEMINI_URL, headers=headers, json=payload)
        response.raise_for_status() # Lanza una excepci√≥n para errores HTTP (4xx o 5xx)
        data = response.json()
        if data and 'candidates' in data and data['candidates']:
            # Extrae el texto del resumen de la respuesta de Gemini
            return data['candidates'][0]['content']['parts'][0]['text'].strip()
        else:
            print("‚ùå La API de Gemini no devolvi√≥ la estructura de datos esperada.")
            return "No se pudo generar un resumen autom√°tico."
    except Exception as e:
        print(f"‚ùå Error al obtener resumen de Gemini: {e}")
        return "No se pudo generar un resumen autom√°tico."

def generate_comments_report(comments: list, filtros: dict = None, charts: dict = None) -> io.BytesIO:
    """
    Genera un informe PDF de an√°lisis de comentarios de clientes.

    Argumentos:
        comments (list): Una lista de diccionarios, donde cada diccionario
                         representa un comentario con sus detalles.
        filtros (dict, opcional): Un diccionario de filtros aplicados al
                                  conjunto de comentarios.
        charts (dict, opcional): Un diccionario donde las claves son t√≠tulos
                                 de gr√°ficos y los valores son datos de imagen
                                 codificados en base64 (ej. 'data:image/png;base64,...').

    Retorna:
        io.BytesIO: Un objeto de tipo BytesIO que contiene el PDF generado.
    """
    # Combina todas las respuestas para generar un resumen general
    all_text = " ".join(
        c.get("respuesta", "") for c in comments if isinstance(c.get("respuesta"), str)
    ).strip()
    if not all_text:
        all_text = "No se proporcionaron comentarios v√°lidos para resumir."
    
    summary = get_summary_from_gemini(all_text)
    fecha_actual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter # Ancho y alto de la p√°gina (tama√±o carta)
    margin = 50 # Margen a los lados de la p√°gina
    current_y = height - margin # Posici√≥n vertical actual en la p√°gina

    # --- Encabezado institucional ---
    company_name = "Alicia Modas" # Nombre de la empresa para el encabezado
    report_title = "Informe de An√°lisis de Comentarios" # T√≠tulo del reporte

    # Si tienes un logo de la empresa, puedes cargarlo aqu√≠.
    # Aseg√∫rate de que el archivo del logo (ej. 'logo.png') est√© en una ruta accesible en tu servidor.
    # Por ejemplo, si lo tienes en el mismo directorio que tu script:
    # logo_path = 'logo.png' 
    # try:
    #     if os.path.exists(logo_path):
    #         logo = ImageReader(logo_path)
    #         # Ajusta x, y, width, height seg√∫n el tama√±o deseado del logo
    #         # Dibuja el logo a la derecha del t√≠tulo del reporte o en una esquina
    #         logo_width = 80
    #         logo_height = 40
    #         c.drawImage(logo, width - margin - logo_width, current_y - 30, width=logo_width, height=logo_height, preserveAspectRatio=True)
    # except Exception as e:
    #     print(f"Error al cargar el logo: {e}")
    #     # Opcional: Si el logo no carga, puedes mostrar un texto de marcador de posici√≥n
    #     # c.setFont("Helvetica-Bold", 10)
    #     # c.drawString(width - margin - 80, current_y - 20, "üè¢ Logo Ausente")

    c.setFont("Helvetica-Bold", 24)
    c.drawString(margin, current_y, f"{company_name}")
    current_y -= 30 # Espacio despu√©s del nombre de la empresa

    c.setFont("Helvetica-Bold", 18)
    c.drawString(margin, current_y, f"üìÑ {report_title}")
    current_y -= 25 # Espacio despu√©s del t√≠tulo del informe

    c.setFont("Helvetica", 10)
    c.drawString(margin, current_y, f"Fecha de generaci√≥n: {fecha_actual}")
    current_y -= 12
    c.drawString(margin, current_y, f"Total de comentarios procesados: {len(comments)}")
    current_y -= 12
    if filtros:
        filter_text_parts = []
        for k, v in filtros.items():
            if isinstance(v, list):
                filter_text_parts.append(f"{k}: {', '.join(map(str, v))}")
            else:
                filter_text_parts.append(f"{k}: {v}")
        c.drawString(margin, current_y, f"Filtros aplicados: {', '.join(filter_text_parts)}")
        current_y -= 15

    # L√≠nea divisoria despu√©s del encabezado
    c.setStrokeColor(HexColor("#CCCCCC")) # Un gris m√°s claro para la l√≠nea
    c.line(margin, current_y, width - margin, current_y)
    current_y -= 25 # Espacio despu√©s de la l√≠nea

    # --- Resumen ejecutivo automatizado por IA ---
    c.setFont("Helvetica-Bold", 14)
    c.drawString(margin, current_y, "Resumen Ejecutivo Automatizado por IA")
    current_y -= 20 # Espacio despu√©s del t√≠tulo de secci√≥n
    c.setFont("Helvetica", 11)
    
    # Divide el resumen en l√≠neas que se ajusten al ancho de la p√°gina
    lines = simpleSplit(summary, "Helvetica", 11, width - 2 * margin)
    for line in lines:
        # Verifica si hay suficiente espacio para la l√≠nea actual, si no, salta a una nueva p√°gina
        if current_y < margin + 20: # Margen inferior m√≠nimo para texto
            c.showPage()
            current_y = height - margin # Reinicia la posici√≥n Y para la nueva p√°gina
            c.setFont("Helvetica", 11) # Reestablece la fuente despu√©s de cambiar de p√°gina
        c.drawString(margin, current_y, line)
        current_y -= 15 # Espacio entre l√≠neas

    current_y -= 10 # Espacio extra despu√©s del resumen
    c.setStrokeColor(HexColor("#CCCCCC"))
    c.line(margin, current_y, width - margin, current_y) # L√≠nea divisoria
    current_y -= 25 # Espacio despu√©s de la l√≠nea

    # --- Gr√°ficos visuales representativos ---
    if charts:
        c.setFont("Helvetica-Bold", 14)
        c.drawString(margin, current_y, "Gr√°ficos Representativos")
        current_y -= 20 # Espacio despu√©s del t√≠tulo de secci√≥n

        for title, b64_data in charts.items():
            # Verifica si hay suficiente espacio para el gr√°fico en la p√°gina actual
            # Se estima que un gr√°fico necesita alrededor de 250 puntos de altura
            if current_y < margin + 250:
                c.showPage()
                current_y = height - margin # Reinicia la posici√≥n Y para la nueva p√°gina
                c.setFont("Helvetica-Bold", 14) # Reestablece el t√≠tulo de secci√≥n
                c.drawString(margin, current_y, "Gr√°ficos Representativos (Continuaci√≥n)")
                current_y -= 20

            c.setFont("Helvetica-Bold", 12)
            c.drawString(margin, current_y, f"üìä {title}")
            current_y -= 15 # Espacio despu√©s del t√≠tulo del gr√°fico

            try:
                # Decodifica los datos de la imagen base64
                if ',' in b64_data: # Si es una URL de datos (ej. "data:image/png;base64,...")
                    image_data = base64.b64decode(b64_data.split(',')[1])
                else: # Si es solo la cadena base64 pura
                    image_data = base64.b64decode(b64_data)
                
                image = ImageReader(io.BytesIO(image_data))
                
                # Obtiene las dimensiones originales de la imagen
                img_width, img_height = image.getSize()
                aspect_ratio = img_height / img_width
                
                # Calcula las dimensiones de visualizaci√≥n para que quepa en la p√°gina
                # y mantenga la relaci√≥n de aspecto. El ancho m√°ximo es el ancho de la p√°gina - 2*margen.
                display_width = width - 2 * margin
                display_height = display_width * aspect_ratio

                # Si la altura calculada es demasiado grande, escala a√∫n m√°s para que se ajuste
                if display_height > 200: # Altura m√°xima deseada para un gr√°fico
                    display_height = 200
                    display_width = display_height / aspect_ratio

                # Centra la imagen horizontalmente
                img_x = margin + ( (width - 2 * margin) - display_width ) / 2
                img_y = current_y - display_height - 10 # Posici√≥n Y del gr√°fico, 10 pts de buffer

                # Dibuja la imagen en el lienzo
                c.drawImage(image, img_x, img_y, width=display_width, height=display_height, preserveAspectRatio=True)
                current_y = img_y - 15 # Mueve la posici√≥n Y despu√©s de dibujar la imagen
                
            except Exception as e:
                c.setFont("Helvetica", 10)
                c.setFillColor(black)
                c.drawString(margin, current_y, f"‚ö†Ô∏è No se pudo cargar el gr√°fico '{title}': {e}")
                current_y -= 20 # Espacio para el mensaje de error

            current_y -= 15 # Espacio entre gr√°ficos

        current_y -= 10
        c.setStrokeColor(HexColor("#CCCCCC"))
        c.line(margin, current_y, width - margin, current_y) # L√≠nea divisoria
        current_y -= 25 # Espacio despu√©s de la l√≠nea

    # --- Detalle tabular de comentarios ---
    c.setFont("Helvetica-Bold", 14)
    c.drawString(margin, current_y, "Detalle de Comentarios")
    current_y -= 20 # Espacio despu√©s del t√≠tulo de secci√≥n
    c.setFont("Helvetica", 9) # Fuente m√°s peque√±a para el contenido de la tabla

    headers = ["Fecha", "Usuario", "Pregunta", "Respuesta", "Sentimiento", "Polaridad"]
    # Anchos de columna ajustados para un mejor ajuste del contenido
    col_widths = [70, 70, 100, 150, 60, 50] # La suma debe ser <= (width - 2*margin)

    # Dibuja el fondo gris claro para los encabezados de la tabla
    header_height = 18
    c.setFillColor(lightgrey) # Establece el color de relleno a gris claro
    c.rect(margin, current_y - header_height, sum(col_widths), header_height, fill=1) # Dibuja el rect√°ngulo
    c.setFillColor(black) # Restablece el color de relleno a negro para el texto

    # Dibuja los encabezados de la tabla
    header_y = current_y - 12 # Posici√≥n Y para el texto de los encabezados
    x_offset = margin
    for i, header in enumerate(headers):
        c.drawString(x_offset, header_y, header)
        x_offset += col_widths[i]
    current_y -= header_height + 5 # Mueve la posici√≥n Y despu√©s de los encabezados (m√°s un poco de padding)

    row_height = 15 # Altura para cada fila de la tabla

    for cmt in comments:
        # Verifica si hay suficiente espacio para la fila actual, si no, salta a una nueva p√°gina
        if current_y < margin + row_height:
            c.showPage()
            current_y = height - margin # Reinicia la posici√≥n Y para la nueva p√°gina
            
            # Vuelve a dibujar el encabezado de la tabla en la nueva p√°gina
            c.setFillColor(lightgrey)
            c.rect(margin, current_y - header_height, sum(col_widths), header_height, fill=1)
            c.setFillColor(black)
            header_y = current_y - 12
            x_offset = margin
            for i, header in enumerate(headers):
                c.drawString(x_offset, header_y, header)
                x_offset += col_widths[i]
            current_y -= header_height + 5

        # Prepara los datos de la fila, asegurando truncamiento para que se ajusten a la celda
        data_row = [
            cmt.get("timestamp", "")[:19], # Trunca fecha/hora
            cmt.get("usuario", "")[:15], # Trunca usuario
            cmt.get("pregunta", ""), # Se manejar√° el truncamiento din√°micamente
            cmt.get("respuesta", ""), # Se manejar√° el truncamiento din√°micamente
            cmt.get("sentimiento", ""),
            str(cmt.get("polaridad", ""))
        ]

        x_offset = margin
        for i, value in enumerate(data_row):
            # Truncamiento din√°mico con "..." si el texto es demasiado largo para la columna
            if c.stringWidth(value, "Helvetica", 9) > col_widths[i] - 5: # 5 pts de padding
                while c.stringWidth(value + "...", "Helvetica", 9) > col_widths[i] - 5 and len(value) > 0:
                    value = value[:-1]
                if len(value) < len(data_row[i]): # Solo a√±ade "..." si hubo truncamiento
                    value += "..."
            
            c.drawString(x_offset, current_y - 10, value) # 10 pts para alineaci√≥n vertical en la celda
            x_offset += col_widths[i]
        current_y -= row_height # Mueve la posici√≥n Y para la siguiente fila

    # --- Paginaci√≥n autom√°tica y n√∫meros de p√°gina ---
    c.showPage() # Fuerza una nueva p√°gina para asegurar que la numeraci√≥n se dibuje correctamente en la √∫ltima p√°gina.

    # Obtiene el n√∫mero total de p√°ginas despu√©s de que se ha generado todo el contenido
    total_pages = c.getPageNumber()
    for i in range(1, total_pages + 1):
        c.setPageNumber(i) # Establece la p√°gina actual para dibujar el texto
        c.setFont("Helvetica", 9)
        c.setFillColor(black) # Asegura que el color de texto sea negro para el n√∫mero de p√°gina
        # Dibuja el n√∫mero de p√°gina centrado en el pie de p√°gina
        c.drawCentredString(width / 2, margin / 2, f"P√°gina {i} de {total_pages}")
        
        # Necesario para avanzar a la siguiente p√°gina para dibujar en ella el n√∫mero de p√°gina.
        # Si esta no es la √∫ltima p√°gina, showPage() avanzar√° el lienzo a la siguiente.
        # Si es la √∫ltima p√°gina, simplemente termina la p√°gina actual.
        if i < total_pages:
            c.showPage() 

    c.save() # Guarda el contenido del lienzo en el buffer
    buffer.seek(0) # Mueve el puntero al inicio del buffer para que pueda ser le√≠do
    return buffer